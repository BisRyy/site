<?xml version="1.0" ?>
<rss type="dict">
	<channel type="list">
		<title>Yang Shun's CS3216 Blog</title>
		<description>Hi I'm Yang Shun. This is my blog. I build cool stuff.</description>
		<link>http://yangshun.im/cs3216/#/</link>
		<item type="dict">
			<title type="str">What I hope to learn in CS3216</title>
			<link type="str">http://yangshun.im/cs3216/#/what-i-hope-to-learn-in-cs3216</link>
			<description type="str">Having taken CS3217 before, I understand that CS3216 is unlike most CS modules, the learning curve is extremely steep and students are expected to turn from zero to hero in a span of few weeks. CS3217 caught my off guard; I literally spent every single day coding and learning Objective-C, severely losing sleep and hair. I know many CS3216 alumni and heard their experiences about the module and the hard times they have gone through. Why do people put themselves through so much suffering and hardship when there are easier alternatives around? It is because stretching myself to ours limits is the fastest way to level up. We all are equal in the sense that each person has the same limited resource: time. Hence we have to optimise our time, and spend it in a way that we enjoy and also gain the most out of. For me, I believe that coding is the right field for me where it is in the sweet intersection of something I enjoy doing, can make a living out of, and am good at.

#### Wearing Multiple Hats ####

I spent a year interning at a startup in Silicon Valley doing iOS and front end web development. Ironically, many of the skills that I picked up during my internship were not taught in school. We are not taught to maintain development and production environments; neither are we taught to work with coworkers from other departments. These are also skills beyond school context that are valued in the industry, and it is important that we learn them. CS3216 is special in the sense that it accepts students from all faculties as long as they have the relevant interests. I launched Corspedia together with a friend late July. Corspedia is a search engine for CORS bidding history and takes the pain out of navigating the horrendous CORS bidding archives interface. It was popular among NUS students and we had 1000+ active visitors each day. For [**Corspedia**](http://www.corspedia.com), I was the designer and front end developer. Both me and my partner participated in the product design are actively discussing what features to add for the next release at the end of the year. I believe an important criteria to succeed is to learn to be versatile and take up many roles. I'm here to learn to wear multiple hats and get my hands dirty on things beyond coding. I would also like to participate heavily in product design and management.

#### Working With People ####

I'm not new to web development. It's weird but I enjoy typing HTML and markdown. I get a sense of satisfaction from seeing markup being transformed into rendered layouts and elements. It is also awesome to be able to create useful softwares that reach the hands of people right from my personal laptop. But softwares are rarely the work of a single person. I enjoy working in small teams with trusted programmer friends to hack out something cool together. I used to enjoy hackathons, participating in almost every that I could while I was in Silicon Valley. I have grown to realize that my time was better spent working on longer-term side-projects, rather than hackathon apps that I would trash after the hackathon event. We are forced to work with different people for the various CS3216 assignments, and this will train me to adapt to different working styles.

#### Leveling Up (Fast) ####

Technically speaking, I'm a year 4 in SoC but the truth is that I have only completed 5 CS modules so far. That is because I started university majoring in Mechnical Engineering but I grew to love programming and found myself spending more time on coding than my mechanical engineering modules. I didn't really understood what I was studying in ME, and I was familiarizing myself with question patterns rather than understanding the concepts in order to clear the exams. In the end I took a gamble and applied to switch course after Year 2 Sem 1. My results were decent enough and I had a recommendation from Dr Ang Chuan Heng whom I worked under while serving as a Teaching Assistant for CS1020E. In the end, I could switch course and even keep my NUS Faculty scholarship. It was too good to be true. I haven't enjoyed school so much in my life before. 

But this also means that I was behind many of my peers. I have to work doubly hard in order to make up for the lost time. As warm up for CS3216, I coded this static site blogging engine using AngularJS, called [**Luna**](https://github.com/yangshun/luna). I'm a front end guy, I dislike using command line interfaces and dealing with databases, hence I was fascinated by static site templating engines. I was inspired by [**Jekyll**](http://jekyllrb.com/) and [**Empress**](https://github.com/hodgesmr/Empress), which are static site engines that generate HTML pages from markdown files. **Luna** is more flexible to use compared to Blogger and Wordpress (mainly because I built it) as I only have to write the blog content in markdown and run a python script to generate the content in JSON. I also happen to like to customise my own sites and I quite enjoy using this so far! (:

I will probably not get another chance to improve rapidly in web development in school if I don't take CS3216. So why not?</description>
			<guid type="str">what-i-hope-to-learn-in-cs3216</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">1</post_number>
		</item>
		<item type="dict">
			<title type="str">Mobile Assignment Reflections</title>
			<link type="str">http://yangshun.im/cs3216/#/mobile-assignment-reflections</link>
			<description type="str">This assignment made me worry alot because of the little time we spent coding and testing it. I still stand by my previous rants that mobile web development is a PITA, there are simply too many nitty gritty things to consider and pitfalls to avoid when developing for mobile.

But surprisingly we did extremely well for this assignment! Far exceeding my expectations by just too much. Based on the feedback given from the teaching team, I'm glad that the decisions I made when designing (both aesthetic and product) the application turned out to be the right ones:

**Choosing a Suitable CSS Framework**

I didn't use Bootstrap, Foundation nor jQuery Mobile (because every other team would be using it) for the HTML and CSS. Instead, I chose to use [**UIKit**](http://www.getuikit.com/), which I chanced upon (thankfully) in a Web Designer newsletter a week before the start of Assignment 3. I chose UIKit because they had a slide-to-reveal navigation component which was prevalent in pre-iOS7 mobile apps. This helped me score quite a few points in achieving a native-like feel.

**Flat Design**

Almost every new UI design is flat now! Not that I really like flat design, but flat design is seriously easier to implement because I can do away with drop shadows, inner shadows, etc. I also wanted to try out developing an iOS7-like app, with heavy usage of Helvetica Neue and little use of borders.

**Optional to Sign Up**

For our app, Qivi, which is a mobile version of a classroom clicker, if every user needed to sign up before being able to use it, I'm pretty sure nobody would use it. I actually learnt this from my the startup I interned over my NOC program, [**EasilyDo**](http://www.easilydo.com). The EasilyDo app does not require users to sign up before allowing them to use it, because users have to see the value in it before being willing to sign up. This was a pain to implement because users had to be given a temporary identity, but it's necessary to gain some users.

**AngularJS**

[**AngularJS**](http://angularjs.org/) was perfect for this app because the app has to be backed by a RESTful service. The trouble with using RESTful APIs comes when you have to handle the updating of the view after the data has been retrieved. Those without frameworks will either append raw HTML or use jQuery to manipulate the DOM. I hate mixing my HTML and JS together because it becomes an unmaintainable mess very soon. 

Also, AngularJS is pretty good for making Single-Page Applications, which is extremely suitable for a mobile web app that requires caching of files. Routing is done on the client side, and the number of page loads/refreshes is reduced.

Admittedly, I used some hackish methods to get around some issues of using UIKit and AngularJS together, but kinda bobian because we were under schedule constraints &gt;_&lt;

**Building a Help/FAQ Page**

This is another tip that I picked up from the **EasilyDo** mobile app. If your app has a certain level of complexity, it's not realistic to expect users to learn the app on their own. This is made even harder if the interface is confusing and does not stick to the convention of mobile apps. 

As Su Yuen said, 

&gt;&quot;Most average laymen users however would give up within about 5-10 seconds if they open your app/website and can't figure out what is going on. It is especially confusing if the data you have populated in the website/app upon landing on your site is data like 'Test 123'. &quot;

Thankfully I created a sample event titled **&quot;Testing Event for Qivi&quot;** with detailed instructions in the &quot;Help&quot; page on how to understand and experience what Qivi does.

**Keep Things Simple**

Given the lack of time, my team had to cut features and ultimately we reduced our feature set to the core functionality of real-time response to polls. In the pitch, I repeatedly stressed the key value proposition of Qivi and guided users in experiencing it through the &quot;Help&quot; page. 

Focus on one thing, do it extremely well before moving on to other features.

**Overall**

Overall, I'm *extremely* glad that things turned out alright and that the (coincidentally?) good UI/UX decisions made up for the lack of time in building an app that is robust against the dumbest users. I definitely learnt something valuable from this assignment and shall apply it to the final project (:</description>
			<guid type="str">mobile-assignment-reflections</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">10</post_number>
		</item>
		<item type="dict">
			<title type="str">More Thinking, Less Coding</title>
			<link type="str">http://yangshun.im/cs3216/#/more-thinking,-less-coding</link>
			<description type="str">We are nearing the halfway mark of our final project but to be honest we haven't finalized on the game idea. We went on an excursion to the arcade and spent roughly 8 bucks each, trying out the games the arcade had to offer. Here's a picture of Chun Mun and Viet Tien having fun playing Bishi Bashi:

&lt;img src=&quot;img/arcade.jpg&quot; width=&quot;400&quot;&gt;

Initially we wanted to emulate the game [**Gyro**](https://play.google.com/store/apps/details?id=pl.submachine.gyro&amp;hl=en) and make a multiplayer version of it. However, after further consideration, I found it inappropriate and people would get bored easily and called for a discussion with the team.

Our target application has to be:

- Multiplayer (Support up to 10 concurrent players)
- Casual
- Newcomers who just joined the game should not be too disadvantaged
- Make use of a mobile devices' capabilities

The games that came to my mind that fell into this category were multiplayer First-Person shooters such as **Counter Strike** and **Team Fortress 2**. A team-based shooting game should work for us!

The next decision was to decide on the theme of the game. As I am the sole designer and front end styler (I'm not the only front end engineer here because Soedar, Viet Tien and Chun Mun all write better Javascript than me), we have to pick a theme that was nice, easy and fast to design. Sounds like the Project Management triangle where you pick two from 'Fast', 'Good' and 'Cheap'? Not so much here because in design that is possible. *Good Artists Copy, Great Artists Steal*. But the best artists steal, modify, combine things, and make it their own! That's how the iPhone was made anyways.

Here's a sneakpeek at what we have for the project so far: 

![Splashscreen](img/mockup.jpg) 

Looks pretty okay? I think so too. Let's see what we can come up with in the next 3 weeks. (:</description>
			<guid type="str">more-thinking,-less-coding</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">11</post_number>
		</item>
		<item type="dict">
			<title type="str">How To Do Projects:</title>
			<link type="str">http://yangshun.im/cs3216/#/how-to-do-projects:</link>
			<description type="str">1. Work with the **smart**
2. Work with the **creative**
3. Work with the **hardworking**
4. Assign work according to each other's **strengths**
5. If possible, **modify** your role to make up for an aspect your team is lacking in
6. Pick a topic that everyone is **interested** in
7. Have **fun** doing the work!</description>
			<guid type="str">how-to-do-projects:</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">12</post_number>
		</item>
		<item type="dict">
			<title type="str">The Last Lectures</title>
			<link type="str">http://yangshun.im/cs3216/#/the-last-lectures</link>
			<description type="str">I love attending last lectures for some weird reason. It is usually during the last lectures when the profs share their life experiences and wisdom; stuff that cannot be obtained from lecture notes or the internet. This week, I had the honour of attending two last lectures, the modules CS3216 and CS1010S by Prof Colin and Prof Ben respectively. The semester has almost come to a close and it can be summarized with two modules: Yes, CS3216 and CS1010S. I literally neglected all other modules this semester and only did their required work when the deadlines approached. Not really a trait of a good student, but who gives? I know my limits and I do what I like.

### CS3216 ###

**Talking to Users**

This is perhaps one of the most rigorous courses in NUS. We built four (?) products within a semester. There was barely any time for breaks. Although I don't think I leveled up as a developer by much, I think I improved a fair bit in product and aesthetic design. We were forced by Prof Colin to keep talking to our users and that's what we did. Whenever I met my friends in/outside school, I would get them to try my product and observed how they interacted with it. Initially, the UX of the product was pretty bad, and I ended up having to teach my friends how to use and play the product. 

But I can't be around to teach every user how to use the product.

Thus we had to get feedback and refine the UX. Thanks to valuable advice from Prof Colin, Su Yuen, and our mentors from LambdaMu, Abhishek and Ivan, we finally got a clear direction and knew what to do with our product. I actually learned ethnography before, in my Design Thinking classes when I was still in Engineering. At that time, we weren't really building a product, just ideating and fantasizing. The curriculum in Engineering was built as such, and that's a problem that I dislike about Engineering. But I didn't really talk to people then, partly because I found it hard to sell an idea without a prototype. 

CS3216 taught me the importance of user testing and validation. Although the friends that I showed the product to found it difficult to use initially, once they were taught and started playing, all I could see were smiles on their faces while they were engrossed in the game.

**Execution over Ideas**

&gt; Ideas are cheap.

I first heard this from Prof Ben when I was taking CS3217 but only truly understood it awhile later. This is evident in the many hackathons that I went to in Silicon Valley. Some teams had radical ideas but didn't have the ability to pull it off within 24 hours. Soedar and Joe Chee were my hackathon buddies in SV and I'm glad that both of them could execute ideas really fast, and well too. We had decent ideas, but none of them were really radical nor original. However, *we won stuff*. Ultimately, it all boils down to the execution, whether a small team of 3-4 could complete a prototype of their idea within 24 hours that sufficiently demonstrated the value. Good design helped of course, that's where I contributed to. Heh.

To be honest, my final project idea of having multiple users interacting with a large display is not a new idea. While doing my research on advertising use-cases of our product, I found at least [10 over examples of big brands using interactive billboards for advertising](http://www.trendhunter.com/slideshow/interactive-advertising-campaigns). However, I bet these brands spent a huge load on creating these advertising apps when they could have done so at a much lower cost.

I think my team executed **Una** well. A month ago, we had nothing. We were busy with midterms for the other modules that we have neglected in the first half of the semester, so we started on the final project late. But thanks to the blazing speed at which Soedar, Chun Mun and Viet Tien coded at, today, we have 3 products to showcase on STePS day. Certainly, good design and planning helped in the process.

### CS1010S ###

Thoroughly enjoyed the last lecture today! As usual, Prof Ben gave a wonderful last lecture that I'm sure inspired many of the students to work hard and possibly consider a career in CS. I talked abit about the key takeaways from CS1010S and their future directions, to one of my tutorial classes and hopefully they were inspired as well. On hindsight, I should have inserted some pictures into my **'Last Tutorial'** slides, like what Prof Ben did.

**Learning How To Learn**

I agree with this alot. I first encountered this when I first took CS3217. Subsequently, I felt that this skill of independent learning was so important, it is required everywhere. I had to learn independently during my NOC internship, learn Python independently to teach CS1010S, learn how to explain programming concepts to a class of freshmen who have no prior experience in programming. Nobody will be around to force you to constantly learn and practice, but that's the only way to improve. Hence having an innate desire to learn is crucial.

**Work-Life Balance**

This is something I'm still struggling to grasp. This sem I worked **everyday** and only went home two/three times. The crazy workload this sem was a result of underestimation on my part. Taking CS3216 and tutoring for CS1010S isn't a smart move. These two modules alone are enough to make up a 20MC workload but on paper are actually worth only 9MCs in total. I'm actually glad if I have a weekend without any appointment or activities so that I can coop up in my room and do more work. But I'm beginning to realize the importance of **people** and broadening my horizons beyond my own major. Learning can be done through interaction with others too.

Perhaps I shall join some designer community or take up a CCA next semester. (:</description>
			<guid type="str">the-last-lectures</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">13</post_number>
		</item>
		<item type="dict">
			<title type="str">Group Projects</title>
			<link type="str">http://yangshun.im/cs3216/#/group-projects</link>
			<description type="str">The trouble with group projects:

- Grouping with *mediocre* teammates makes you want to do everything by yourself. You probably end up having to do so anyways and die in the process.
- Grouping with *godlike* teammates encourages you to decide on a scope beyond the project and you guys die meeting the crazy specifications you have designed for yourself.

Group work is **hard**.</description>
			<guid type="str">group-projects</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">14</post_number>
		</item>
		<item type="dict">
			<title type="str">Portfolio</title>
			<link type="str">http://yangshun.im/cs3216/#/portfolio</link>
			<description type="str">Finally I updated my site with a subset of my past works. I actually wanted to get this up before the semester but procrastination got the better of me. Bleah. Check out my *web* portfolio [here](#portfolio).</description>
			<guid type="str">portfolio</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">15</post_number>
		</item>
		<item type="dict">
			<title type="str">Open Source</title>
			<link type="str">http://yangshun.im/cs3216/#/open-source</link>
			<description type="str">Open-source projects have always fascinated me. I personally find it tough to work effectively in small teams, working with a large community in a public, collaborative manner will makes things unimaginably tougher. However, with good management techniques, effective communication and efficient workflows, the open-source community have succeeded and produced excellent technologies such as Ubuntu, Android, Rails, Django, Bootstrap, AngularJS, just to name a few. These projects have had great impact on technology and are widely used by developers in the course of their work. Android, with Google's backing, has become the world most popular smartphone OS. I personally use many open-source JavaScript projects such as AngularJS and Node.js for my own development.

I have been developing web applications for over a year now, and my portfolio of web projects can be found [here](http://yangshun.im/cs3216/#/portfolio). Having completed the two most rigorous software development courses in NUS, CS3216 and CS3217 and surviving them well, I have picked up good software engineering skills and improved my development competency. 

However, almost all my software engineering projects were constrained within a school setting. I was only required to work in small teams and to meet predefined assignment milestones for the grades. These school projects were often discontinued after the course ended and gone to waste and it's quite a pity. School projects are rarely reflective of real-world software development, where there are many moving parts, a much larger code base, huge development teams, and release cycles.

I hope to be part of the Open Academy Program because of the various unique opportunities it has to offer that I am unable to experience in school: working with talented people in remote teams, picking up industry-standard project management skills, getting exposed to new software development workflows. It seems like an entirely different experience filled with plenty of learning opportunities. I haven't had the chance to work with a large community spanning across nations but am eager to try it. Foreseeable problems include differences in time zones, language barriers, and also, every open-source developer has their own day job to handle. However, given that many companies nowadays have remote offices and development teams scattered across geographical boundaries, knowing how to work in remote teams is becoming an increasingly important skill to hone.

I like to learn and I believe I am a fast learner. 2 years ago, the only language I knew was C++ and all I could do was to compile simple programs with g++. Almost 2 years later, I have developed and launched a few mobile and web applications, and gained a strong competency in front end web development. My ability and desire to learn and improve is my strength and I hope I can put them to good use in the Open Academy Program.

Without CS3216, CS3217 nor CS1010S in the coming semester, there won't be any module to inflict memorable pain in my life; I believe the Facebook Open Academy Program can be a decent source of challenge. 

For a change, I hope to leave an impact by diving into the world of open source development and contributing code that will be used by developer communities around the world.</description>
			<guid type="str">open-source</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">16</post_number>
		</item>
		<item type="dict">
			<title type="str">CS3216 Post-Mortem</title>
			<link type="str">http://yangshun.im/cs3216/#/cs3216-post-mortem</link>
			<description type="str">Just kidding. I didn't die in CS3216. Survived pretty well in fact, given that I spent almost half my time on CS1010S this semester, the other half went to CS3216. Would like to give a quick run-down of my experience in CS3216, something like a review. Oh yes by the way, the current [module review site](http://www.module-review.com) sucks, someone build a better one please.

### CS3216 in General ###

This module has been FUN. Never have I built so many products within a span of a semester before. We had the freedom to do whatever we wanted in our assignments and final project, unlike other software engineering modules where students had to build to-do lists. However, this freedom and flexibility meant that the scope of the project depends on **you**. You can choose to simply meet the bare requirements or aim for the sky with a large-scale project. In my projects, my team(s) and I aimed to meet these three criterias: **usable**, **polished**, **valuable**. This is much unlike my past hackathon projects where I could only achieve polishness. A small, robust application that really works has more impact than an ambitious one that cannot be completed within the timeframe of the project.

CS3216 is a huge test of versatility and my versatility was stretched near its limits throughout the course. My roles in the various assignments and the final project:

- Assignment 1 (Facebook Assignment): **[Osmose](http://osmose.soedar.com)** - Front End Developer, UI Designer
- Assignment 2 (Facebook App Seminar): Tinder - Designer, Content Curator
- Assignment 3 (Mobile Web Assignment): **Qivi** - Front End Developer, UI Designer, Marketing guy
- Final Project: **[Una](http://una-org.github.io)** and **[Nutty Ninjas](http://www.nuttyninjas.com)** - Front End Developer, UI Designer, Creative guy, Marketing guy, Product guy and... Props maker

The final project really drained me out. I was wearing multiple hats and it was tough to juggle them. Shall go into further detail later. 

Comparing with CS3217, it's hard to say whether CS3216 was easier or tougher. CS3216 and CS3217 were tough in their own ways, but one thing is for sure: It gets people addicted to these crazy software development modules and leaves them asking for more.

&lt;table&gt;
	&lt;tr&gt;&lt;th&gt;CS3216&lt;/th&gt;&lt;th&gt;CS3217&lt;/th&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;4 x Group Projects&lt;/td&gt;&lt;td&gt;Individual problem sets, 1 Final Group project&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;Product-focused, less on engineering&lt;/td&gt;&lt;td&gt;Engineering-focused, nice design is a bonus&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;More flexible curriculum and scope - build (almost) anything you want&lt;/td&gt;&lt;td&gt;More structured - everyone builds the same app in the Problem Sets&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;No hardware requirements&lt;/td&gt;&lt;td&gt;Requires a Mac, if not you'll have to camp at PL1&lt;/td&gt;&lt;/tr&gt;
	&lt;tr&gt;&lt;td&gt;Many students enter with existing web knowledge&lt;/td&gt;&lt;td&gt;Not many know iOS prior to the course&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

### Assignment 1 - Osmose ###

After working on Corspedia, and seeing a thousand hits a day during the CORS bidding period, I grew interest in creating school-related apps. After seeing the state of the CS1010S IVLE forums (we had a few hundred posts within the first two weeks of school), I had the thought of giving each module a homepage to organize the module-related questions integrated with real-time features, with the aim of promoting interaction among coursemates.

My teammates for this assignment were Soedar, Viet Tien and Chun Mun, they are seriously among the best software engineers that I know in school. I proposed the idea of a StackOverflow x Disqus for NUS modules and the rest were agreeable with it. We knew each other's strengths and hence roles were assigned pretty quickly.

The name Osmose was chosen because I wanted to try naming a product after a proper English word/name. E.g. Path, Line, Amazon. Osmose also meant: *The process of gradual or unconscious assimilation of ideas and knowledge.* The theme colour of blue was chosen, because blue is the colour of water (osmosis). 

Using [sails.js](http://sailsjs.org/), we got the back-end up in a snap, along with real-time sync features. Sad to say, I was the limiting factor in this assignment, because I spent the first a week and a half settling admin matters for CS1010S, and started on the front end work quite late. As we coded, we realized that there was no real need for sails.js, the 'magic' that sails did for its users wasn't really relevant in our case and we still had to write the complicated stuff ourselves.

Because we started on the assignment later than expected, we were rushing to hit all the milestones few hours before the deadline, all of us stayed in school till 12mn to make the final commit together &gt;_&lt;

In retrospect, Osmose wasn't really innovative and there were many loopholes in the product design. We initially wanted to let CS1010S students try it, but after further thought, realized it still had a long way to go before it was good enough to replace IVLE.

![Osmose](img/osmose-1.jpg)

### Assignment 2 - Tinder ###

This assignment started after Assignment 1 and ended before it. A non-coding assignment, we had to analyze and critique a Facebook app and do a class presentation on it. We picked Tinder because it was a highly controversial app and would definitely interest many. Tinder is an app which can match people who are mutually attracted to each other.

My teammates for this assignment were Hendy, Minqi and Chen Liang, who were great presenters. There wasn't clear allocation of roles because the work required for this assignment wasn't too heavy actually. We came up with the content together and I designed the slides. Hendy gave great ideas on how to make the presentation funny and incorporated them into his content. For the first half of the presentation, Hendy made the crowd laugh with his jokes, while Chen Liang articulated the content well in the second half. This helped us score a decent grade for the presentation component.

Next, there was the blogging component where we had to blog about an app presented in class by other teams and also go around commenting on others' blog entries. This took up a lot of time as I went to read the posts by almost everyone in class. Crafting insightful comments also sucked up some time. A big thanks to my peers who took time to comment on my entry!

This assignment made me feel like a CNM student, with the amount of writing we had to do. But it was a good break from all the coding in Assignment 1.


### Assignment 3 - Qivi ###

I believe most students in class disliked assignment 3. This includes me as well. I blogged about how much I disliked mobile web development in one of the previous posts. Although I hate to agree, but mobile is the future. This assignment had to be there. I proposed the idea of transforming mobile devices into clickers. A plausible replacement for current clickers, which are extremely troublesome to use. The app was named 'Qivi' - The acronym for Question Instantly, Vote Instantly.

My teammates for this assignment were Zhixing, Qing Cheng and Navie. Since they were back end coders, I was left to do the front end by myself. Project management for this assignment was quite bad.. We only really started during recess week and everyday felt like a hackathon. Being the sole front end developer, I was also worried that I couldn't complete it in time. 

Ultimately, we cut features and removed the option of answering open-ended questions. The non-use of server-side frameworks caused the API to be inconsistent and more bug-prone. Sigh. But we managed to finish in the end, hitting as many milestones as possible. The end-product was still buggy, but *done is better than perfect* (lame excuse).

As there were two kinds of users for Qivi (creator and voter), it wasn't immediately obvious as to how to use Qivi. Hence I created a help page that demonstrated the flow of event creation and poll responding. A test event was also created. This walkthrough served two purposes: (i) Teach and show the graders how Qivi is supposed to be used. (ii) Guide the graders through a bug-free app flow so that the app appears less buggy.

The help page worked out and it's probably the reason why we scored extremely well for this assignment. But this doesn't change the fact that mobile web development is a big pain.


### Final Project ###

The whole process can be broken down into a few stages: Ideation, Development, Refinement, Pivoting, Showcase.

#### Ideation ####

The ideation process for the final project was pretty different from the previous assignments. We were choosing between two paths: (i) Aim for many users or (ii) Be the coolest app during STePS. Well, they certainly aren't mutually exclusive but it would be hard to achieve both.

After some discussion, we chose the path of &quot;being the coolest app during STePS&quot; and started to think about how we could get more eyeballs during the event. Each booth gets quite a number of people visiting it, but there are only the 4 of us and a few computers. We would let many people slip by, given the limited amount of manpower and hardware we had. Hence, our product had to do the talking. Also, it would be ideal to allow everyone to try out the product *at the same time*. That would only be possible if the audience had a device of their own. Hence, the idea of a cross-display application where users can interact with in real-time, using their mobile devices.

These kind of applications are usually games. Prof Colin and Su Yuen advised everyone against doing games for CS3216, for the obvious reason of the inability to generate art assets. However, there are actually some kind of games that can be made by indie developers: minimalist games. These games are usually 2d, have a retro theme and have a flat design. After evaluating our resources and skills, we went ahead with the direction of building a game.

What game should we build that was reasonable, given our timeframe, skills that would also fit the style of STePS? We eventually decided on a console-style, top-down, ninja-themed multiplayer shooter game. Players would play the game by using their mobile devices as controllers on a shared display.

#### Development ####

We weren't exactly sure whether the idea of cross-display games would work out because of latency issues. Chun Mun was quick in prototyping simple demos to test the latency and they were surprisingly low. Soedar built a tank game using EaselJS to test the frame speed of the game while Viet Tien added a virtual joystick to test controller interactions. 

We were satisfied with the results of our prototyping and were confident that the game would work fine. Together with my brother, I built the assets and developed the HTML for the non-game screens while Soedar, Chun Mun and Viet Tien worked on the game. 

#### Refinement ####

When the first version of our ninja game was complete, we went around getting many of our friends to try. The general feedback from them was that the controller was hard to use and it was also troublesome to have to lock the orientation of the device before playing. Other feedback included giving a sense of purpose to the game by adding a leaderboard, monsters, and more flashy visuals. We took all these into account and made the necessary adjustments.

#### Pivoting ####

Two weeks before the showcase, we met with our mentors from LambdaMu games and they recommended that our product should be the technology behind the game, and not the game itself. Prof Colin and Su Yuen suggested the same. We were quite apprehensive about it because a library would not attract as many people as a game would. Also, there wasn't much time left to build another product.

However, Soedar was confident of writing the library. We decided to give both the library and the game equal emphasis. Soedar completed **[Una](https://github.com/una-org/una)**, the library for writing cross-display applications, within 2 days. It's even [live on npm registry](https://npmjs.org/package/una) right now! I proceeded to create a marketing site for Una. Within a few days, our library was live.

![Osmose](img/una.jpg)

#### Showcase ####

With everything in place, it was the time to embark on the final phase of the final project: preparation for STePS. We wanted to excel in STePS and hence we put in a tremendous amount of thought into designing our booth, our product, and our showmanship. The amount of milestones we wanted to be met by STePS day was insane. We kinda brought it onto ourselves (or rather, I coerced the rest into it).

We put ourselves in the shoes of a participant at a conference. What would catch the attention of a person who was surrounded by tons of booths and posters? We definitely needed flashy visuals and publicity. A good way to attract a crowd was to have a crowd in the first place. We made it super simple for participants to try out our flagship game, **[Nutty Ninjas](http://nuttyninjas.com)**, just by using their mobile phones and accessing a web page. To garner more eyeballs, we requested for projectors and screens. However, we got a room (SR3) to ourselves instead! Having a room was a double-edged sword because we were separated from the rest of the CS3216 booths and people may not notice us.

To solve this, I designed and printed many attention-grabbing posters, and we pasted them at the entrances of SoC, to direct people to SR3. Friends and family were invited to come down to visit our booth. We opened the doors of SR3 wide such that people would know that there is actually a booth inside SR3 and perhaps pop in and have a look.

There were also great thoughts put into the way we angled Una as a library that is capable of much more than just gaming. It is a library that is capable of changing the way people interact with websites.

Viet Tien reminded us about network issues causing some CS3217 projects unable to be demonstrated. That would be disastrous if it happened to us. Hence we formulated a backup plan of using our own router to create a local network in the event that the wireless networking in SoC failed and we could not rely on the school network for the demonstration.

To look more professional, we printed tshirts and I made nametags for everyone (:

On STePS day, the crowd was amazing! Many were impressed by the concept and requested for our contact details. We barely had any time to eat. Most of our time was spent explaining Una and teaching people how to play Nutty Ninjas.

6 weeks, 4 people, 3 products, Best Project. We made it (:

![Team Una](img/steps-team-una.jpg)</description>
			<guid type="str">cs3216-post-mortem</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">17</post_number>
		</item>
		<item type="dict">
			<title type="str">Reflections of a CS1010S Head Tutor</title>
			<link type="str">http://yangshun.im/cs3216/#/reflections-of-a-cs1010s-head-tutor</link>
			<description type="str">From Aug 2013 to Dec 2013, I was selected by Asst Prof Ben Leong of NUS to serve as the Head Tutor for CS1010S Programming Methodology, an introductory programming course in NUS. It was a new NUS course that aims to impart fundamental concepts of problem solving by computing and programming using the Python language.

There were a few phases of this project:

1. **Recruitment Phase** - Recruitment of strong programmers into the teaching staff team
2. **Course Preparation Phase** - Creating materials (lectures slides, tutorial questions) for the students and staff to use during the course
3. **Execution Phase** - After the semester has started, conduct weekly tutorials for our assigned students
4. **Wrapping Up** - Reflection on what went well and how we can improve for future semesters of teaching CS1010S


## Approach ##

**Admin**

There were lots of administrative issues to handle, because being a new course, much of the course materials had to be newly prepared. We used tons of Google services for our admin (Google groups for communication, Google spreadsheets for issue tracking and student data, Google sites for documentation). We did not use specialized project management tools like Asana or Jira because everybody was comfortable with Google services and it seems to be sufficient for our purpose.

I value good documentation as it helps orientate people that are new to a team. Hence I wrote a wiki document for the course so that new tutors would have an easier time familiarising themselves with our working style. Also, during the course preparation phase, I would review the work of the other tutors to the best of my ability so that the quality of materials that we release to the students were of high standards. Being the source of information to tutors and students, I kept myself well-informed so that I could answer almost all questions thrown at me. I also ensured that everyone was up to date with the course's progress. 

I did not know Python prior to CS1010S and hence I had to pick it up on my own before the course material preparation phase even started. Fortunately, it was easy to pick up a new programming language because I have been exposed to various languages. To save the time of the other tutors, I gathered resources, created tools and teaching aids and shared them with the other tutors. Even though it took up more of my personal time, but overall it was for a greater good: It saved the staff team more time due to the large size of the team and helped everyone get the job done more effectively.

**People Management**

&quot;People&quot; here, are divided into two categories: the staff team and the students. To be honest, it is my first time managing a professional team of people. My approach was to get to know most of the people (staff and students) on a personal level outside the classroom. The motivation behind this was to better understand each individual's personality so that delegation of work could be more efficient and mismatch of interests could be prevented as much as possible.

As the team was huge, and there were many side-roles to cover, I/Cs were nominated and some tutors would be in-charge of certain materials/aspects of the course. Whenever other tutors needed help, I would step in and took over their roles or get someone else who is available to help.

As the Head Tutor, I also set a positive example by marking by students' assignments as early as possible and topping the tutor leaderboard (yes, we had a leaderboard which showed the number of assignments we marked and the delay between a student submission and us marking it).

In making decisions, often I would seek the opinions of the other tutors so that everyone had a part to play in the final decision being made. This would give a sense of ownership of the course to people and trigger their intrinsic motivation to work hard on it.

**Teaching**

I have done private tuition before but it was my first time standing in front of a class to conduct tutorials. I felt that I needed to customized my teaching according to the standard of the class. For the stronger classes, I did not always go through the code, instead, I encouraged the students to formulate alternative approaches to solve the problem.

Caring for students was also essential to being a good teacher. Often, I chatted with them outside class and treated them as friends rather than students. This helped break the teacher-student barrier which helped in making the lessons more enjoyable.


## Motivations ##

I had a few main motivations behind undertaking the role as Head Tutor:
- Learn to work with a team of talented individuals (elite bunch of tutors).
- Learn how to run a course well. Many courses in NUS left students uninterested in the subject matter.
- Leave a positive impact in the students' lives and possibly get them interested in a career in Computer Science. 
- Teaching the students to learn how to learn. Train them in being independent learners and increase their potential.


## What Was Done ##

**Students**

- 230 students were taught programming concepts that may be needed to solve problems in the coursework by a professor and a team of 17 tutors.
- Gave students a memorable time in NUS.
- Sparked interest in many students to take programming courses beyond CS1010S (even though they were only required to take one)

**Tutors**

- Lost plenty of sleep in the process
- Conducted 10 tutorial sessions and marked many missions

**Me**

- Wore multiple hats (designing, admin, coordinating, chaparoning)
- Leveled up and grew by a whole lot (no longer just a coding monkey)
- Got to know many students and made meaningful relationships with them
- Came up with new teaching initiatives that helped students be better programmers


## How It Turned Out ##

I was rather glad with the outcome of the course and would deem it as a success. It left a deep impression in many students' hearts as the toughest, most painful, most time-consuming yet enjoyable freshmen module.

I'm also glad that my students didn't hate me. In my teacher performance report, I received an average rating of 4.56/5.00 in my overall effectiveness as a teacher. Positive remarks from my students included: hardworking, responsible, approachable, caring, friendly, efficient, patient and nice.

Overall, I think it was a successful project with the combined hard work of everyone. (:</description>
			<guid type="str">reflections-of-a-cs1010s-head-tutor</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">18</post_number>
		</item>
		<item type="dict">
			<title type="str">What I Want to Build for CS3216</title>
			<link type="str">http://yangshun.im/cs3216/#/what-i-want-to-build-for-cs3216</link>
			<description type="str">&quot;What exactly do I want to build for CS3216?&quot;. This question has been bugging me for the entire summer and I still do not have an answer to this question. Initially, I wanted to build a multiplayer game that uses WebRTC because it has been really hot after Google demonstrated prototypes of their WebRTC games during Google I/O, such as [Chrome Maze](http://chrome.com/maze/), [Cube Slam](https://www.cubeslam.com/) and [Racer](http://www.chrome.com/racer). Most people will shy away from building games simply because it's tough to produce the assets for the game. However, with a background in design, and because I have experience in building an iPad game [Tenza Yakitori](http://www.youtube.com/watch?v=wI-4l_FhHsk) as the final project of CS3217, I felt that I could build a game for a project and it will still turn out decent. Also, I was getting bored of building CRUD (Create, Read, Update, Delete) apps; game logic was definitely more fun to code.

However, launching Corspedia in the last month made me rethink my decision of building a game in CS3216. A few friends have came to tell me that it was super useful and were glad that I solved a pain point in their bidding process. I'm not entirely sure if I will get such feedback or even be able to reach out to that many users if I built a game instead. I like the feeling of having users use a product I have built. (:

Games aren't all that tough to build. But making it fun and incorporating fun elements into it, is extremely tough. Games are there to provide entertainment, not so much so solve a pain point (unless you consider stress as one). Once a user gets bored of the game, it loses its value entirely. Also, I don't have the confidence to build an addictive and fun game especially when I get bored of the own game that I built.

Therefore, I'm looking at building something useful. It may not be fun, but will definitely improve the lives of its users. NUS Computing students have built better timetable builders, better IVLE experiences and improved many other NUS-related services. Hence, for the first assignment (and possibly the final project), my team and I shall make an attempt at improving a school-related service: A better forum.</description>
			<guid type="str">what-i-want-to-build-for-cs3216</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">2</post_number>
		</item>
		<item type="dict">
			<title type="str">Learning how to Learn</title>
			<link type="str">http://yangshun.im/cs3216/#/learning-how-to-learn</link>
			<description type="str">My team has decided to use [Sails.js](http://sailsjs.org/#!) for the first assignment. It is an MVC framework for node.js that is pretty much like rails. It's time to learn a new framework/library again! And sadly, because it's a new framework, there isn't much documentation and tutorials for me to refer to. I learn best through doing and experimenting. As the saying goes: *I see and I understand, I do and I remember*. Getting my hands dirty and trying things out for myself is an important phase of learning something new.

Being involved in the rapidly evolving field of technology, one has to constantly upgrade oneself. Hence I think the most important skill is to learn how to learn anything, fast and well. I'm thankful that I teamed with a strong team for the first assignment. Soedar, Viet Tien and Chun Mun are extremely fast learners and talented programmers. We actually do alot of pair programming and meet up very often to work on our Facebook app together. I have learnt quite abit from them and hopefully they get to learn something from me too.

Tutorials start this week and it shall be my first time tutoring a class of CS1010S freshies. Prof Ben is an inspiration to many of his students and I also strive to be an inspiration to my student and spark their interest in Computer Science. In an email thread among the CS1010S tutors, we were discussing about our teaching approaches and about the neediness of the students; they were emailing Prof Ben and asking for help in debugging. I find it amusing because I personally have not done that before and this behaviour is never seen in higher level modules. The goal of CS1010S is to rewire the students' brains to think computaionally. A higher level goal will be to teach the students how to learn on their own, to Google their question whenever they meet a problem instead of relying on someone for an answer. It is hard to achieve that, but extremely important.</description>
			<guid type="str">learning-how-to-learn</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">3</post_number>
		</item>
		<item type="dict">
			<title type="str">Growth Hacking</title>
			<link type="str">http://yangshun.im/cs3216/#/growth-hacking</link>
			<description type="str">The topic of growth hacking has always intrigued me. Coming from an engineering background, I was never exposed to the non-technical aspects of a product. Although my NOC stints allowed me to work with the marketing and business development team, I wasn't involved in the decision-making process and marketing strategies. 

I was thoroughly impressed by Bjorn's presentation. Anyone could tell he was an experienced growth hacker from the techniques that he shared. I especially agree with him that 'Build and they will come' is a bloody damned myth. In the creation process of an app, it's also important to consider the various marketing channels and viral techniques that will be put into the app. An app without a solid plan of how it is going to market itself, is unlikely to be heard of by many after it is being built.

For my CS3216 Facebook assignment, Osmose, I'm proud to say that we already have a pool of beta testers: our students from CS1010S and in future, the NUS population. However, I'm not very confident of growth hacking Osmose to reach out to the rest of NUS. **Corspedia** had it easy because we had help from **NUSMods**, built by Beng Hee also from this class of CS3216. **NUSMods** is truly one of the best NUS-based projects I have seen so far, its UI and UX work so well, it was a joy to use. Looks like we'll have to come up with good strategies before embarking on our final project, which aims to bring Osmose to a new level.</description>
			<guid type="str">growth-hacking</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">4</post_number>
		</item>
		<item type="dict">
			<title type="str">Facebook/iPad Application Seminar: Maps</title>
			<link type="str">http://yangshun.im/cs3216/#/facebook-ipad-application-seminar:-maps</link>
			<description type="str">Ahh the Apple Maps app. What an uproar it has caused when it was first released. Like many iPhone users, I don't use the Apple Maps app but I use Google's Maps app instead, simply because it syncs with the location queries that I make in my MacBook's Chrome browser. Google's Maps app has amazing user experience compared to Apple's version. Makes me wonder if Apple even tested their app with real users before putting it in every iPhone that runs iOS 6 and above.

##### Huge Consequences #####

I cannot agree more with Benjamin on this point. Utility applications are **so damn important** in our lives now. I can't imagine a day where Google Search, Google Docs and Google Calendar breaks down; I'll be at a total loss as I rely on them so much to navigate my day. Map apps are especially important because that is the single source of dependence that a person relies on to navigate his journey. As the saying goes, *With great power, comes great responsibility*. If tens of millions of users rely on a service each day, it jolly well function correctly all the time or else the disruption will affect the lives of many people. It was mentioned that inaccuracy of the maps can cause potential danger hazards. This is especially true if people trust the map app completely and follow its turn-by-turn instructions. Drivers can get over-focused on following instructions from the app and lose track of the surroundings. It would be disastrous if the map app wrongly directs the driver to turn into a street of the opposite direction! It may be far too late before the driver realizes the mistake.

Some examples of the wonderful things Apple Maps was showing when they first launched: [http://theamazingios6maps.tumblr.com/](http://theamazingios6maps.tumblr.com/)

##### Lousy UX #####

How can a map app not have public transport and cycling routes? It is only in the US that most people own a car. In Asian countries, public transport and cycling is still the dominant mode of transportation. Also, the app does not provide detailed lane guidance,  which shows you which lane to be in as much as a mile before your turn and gets you set up to make your turn. Having drove in California to close to a year, this feature is extremely important when I am travelling to new places because I am unfamiliar with the roads. Speed limits on the road are high and there is little time to set myself up before a turn. This issues scream a lack of usability and goes to show how much thought and user testing Apple has put into the design and development of the application... perhaps none.

##### Crowdsourcing Traffic Data #####

Crowdsourcing is the new buzzword now. It is the act of seeking contributions from the masses, usually an online community. Crowdsourcing is increasingly relevant now because almost everyone possesses a smartphone. This makes everyone connected by the internet. The power of the masses can be harnessed if everyone shares information regarding their current location. This would make an extremely updated real-time traffic situation that benefits everybody. It's a win-win situation and everybody can benefit from a small gesture of sharing a little information. However, put in the context of the application, it is dangerous to be sharing traffic information when one is driving. However, this can be solved by modifying the UI/UX so make the sharing of real-time information be safe and accurate.

#### Original Thoughts ####

Few months back, I happened to switch back to using my iPhone 4S to navigate. I was driving along the roads of Mountain View, and I found the maps app extremely hard to use; the interface looked familiar, but the gestures were unintuitive, flow of the application didn't make much sense to me too. Then it dawned upon me: I was using Apple's new Map app. It was my first time using iOS 6 on my iPhone and I forgot that the default maps app in the device was no longer by Google. Wasting no time, I went to the App Store and downloaded Google's version of the maps app and continued on my journey.

It is appalling that Apple, a guru of UI/UX, produced a Maps app of such quality; the initial version of Apple's Map app seems horrible, but it was improved tremendously in the past year, by finetuning based on user feedback and also acquisition of navigation related startups and technology. The iOS 7 redesign unveiled during WWDC this year also faced the same fate of being flamed and slammed. Perhaps Apple is adopting the [Lean Startup Methodology](http://theleanstartup.com/) and iteratively building products and services. But I'd expect more from Apple if they want to regain their market share of handheld devices. Apple certainly has got much more to improve on.</description>
			<guid type="str">facebook-ipad-application-seminar:-maps</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">5</post_number>
		</item>
		<item type="dict">
			<title type="str">The Calm Before The Storm</title>
			<link type="str">http://yangshun.im/cs3216/#/the-calm-before-the-storm</link>
			<description type="str">Last assignment for CS3216! The past 4 weeks have been hell for me. My senior, Jonathan Low, ex-CVWO president and guest speaker for the past few batches of CS3216 and CS3217, after hearing that I'll be doing CS1010S and CS3216 on top of the standard academic workload in this sem, gave me a *really encouraging* word of advice: 'You will die man.' 

For the past 4 weeks I have been sleeping at 5-6 am every other day and waking up just in time before the tutorials which I have no clue about what the tutor is teaching simply because I haven't been spending time on them. Everyday was like check to-do list, do work, clear backlog, rinse, repeat.

Finally I get a breather! In this e-learning week, we're all supposed to do our own e-learning. Some professors have nicely left us with annotated versions of their lecture notes and honestly I prefer that to attending the physical lectures. Always a fan of independent learning! I'm going to use this week to catch up on all other modules that I have been lagging in, and also help my CS1010S students in learning order of growth. Many of them are unable to grasp the concepts of time and space complexity and I don't blame them. 4 weeks into programming and they have to learn something most others would not learn in an introductory programming course?

I'm honestly quite worried for my CS3216 Assignment 3. Will be working with a bunch of new individuals this time round and I'm unfamiliar with their working style. Doesn't help that we're only given 3 weeks to complete it. Again, I'm the only front end person in the team but thankfully I have dabbled in mobile web development shit before and know the pitfalls to avoid. But still, it's not fun to work on mobile web related stuff. Not only does the developer have to worry about cross-browser and cross-platform issues, there's also cross-devices (different viewport size and specs) to handle?! Sounds like a load of trouble to me.

Was thinking of ideas for assignment 3 and I'm pretty sure I won't want the app to be a platform this time. Almost all assignment 1 projects were platforms, will assignment 3 be similar? Given the short span of time available, I'm not confident of pulling off a mobile web platform well. Initially wanted to do a game but since native applications is no longer allowed, games are not too viable an option. Hence I'm thinking of creating something nimble but useful, something along the lines of a utility application.

Weather app? To-do list app? Calendar app? Perhaps a gamified twist to them. (:</description>
			<guid type="str">the-calm-before-the-storm</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">6</post_number>
		</item>
		<item type="dict">
			<title type="str">Web Development is a PITA</title>
			<link type="str">http://yangshun.im/cs3216/#/web-development-is-a-pita</link>
			<description type="str">This is a rage post because of all the frustration I faced while doing Assignment 3 and mobile web in general. Actually, I quite enjoy web development because HTML and CSS is intuitive and extensible. But what I severely dislike about web development is the fragmentation of browsers, viewport sizes and devices! This is especially a PITA (pain in the arse) when it comes to mobile web development. There are like 3456723139738 different dimensions of mobile device screens. It's certainly not fun ensuring that your mobile site looks good on every available mobile device. Have decided just to build one that works for iPhone 4S/5/5S/5C. Apple FTW. One can go crazy if one tries to support every Android device.

Enough with the angst. Over the past few months, through my attempts at solving the various common problems I faced while doing mobile web developing, I came to realize some recommended practices that should be adopted to make the painful process less painful.

### Use HTML5 Boilerplate ###
So you think you know cross-browser compatibility? You won't know it better than [HTML5 boilerplate](http://html5boilerplate.com/), which provides a template as a starting point for any website. It tries to standardize the CSS across different browsers with [Normalize.css](http://necolas.github.com/normalize.css/) and comes with jQuery and [Modernizr](http://modernizr.com/). For the mobile assignment, I used [HTML5 Boilerplate Mobile](http://html5boilerplate.com/mobile/) which is a starting template for mobile web development.

### Avoid jQuery Animations, use CSS3 Transitions ###
Many developers are more familiar with jQuery animations because it is easier to use (they hate touching the CSS file). However, jQuery animations are **really bad** performance-wise on mobile devices. A full blog post on this can be found [here](http://css3.bradshawenterprises.com/blog/jquery-vs-css3-transitions/). The main reason for this is that CSS3 transitions are hardware accelerated.

### Avoid Small Actionables ###
This is a common pitfall for developers who test their mobile site on the computer. It is not immediately obvious that the experience of navigating the site on a mobile device with your fingers is vastly different from clicking with a mouse. If your anchor links and buttons are too small, users will have a touch time clicking on them. An average user's finger size is 40px x 40px. Don't clutter up multiple small buttons together unless you want users to curse and swear because they clicked wrongly. Leave margin between buttons if your buttons *have* to be small for some weird reason.

### Font Awesome ###
My favorite asset will be these pretty icons from [Font Awesome](http://fortawesome.github.io/Font-Awesome/icons/) that are actually SVGs (scalable vector graphics). With this, no longer is there a need for icon spritesheets that aren't exactly flexible and retina-friendly. EVERYONE SHOULD USE THIS!

Okay, back to my Assignment 3.</description>
			<guid type="str">web-development-is-a-pita</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">7</post_number>
		</item>
		<item type="dict">
			<title type="str">New Skin!</title>
			<link type="str">http://yangshun.im/cs3216/#/new-skin</link>
			<description type="str">Decided not to let my typekit account go to waste hence I changed the font of the site to the famous **Proxima Nova** and tweaked the colors slightly so that it does not look totally similar to [Chun Mun's Blog](http://chunmun.github.io/CS3216). Benefits of building [your own blogging engine](https://github.com/yangshun/luna) is that you have the flexibility to customize it in however way you want it!

Finally, a break from all the HTML and CSS coding now that all the assignments have been completed. I'm really excited at what my team is going to build for the final project. &quot;What is it?&quot;, you ask. I don't know the answer to it myself. Now that's where the fun starts (:</description>
			<guid type="str">new-skin</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">8</post_number>
		</item>
		<item type="dict">
			<title type="str">Team Dynamics Issues</title>
			<link type="str">http://yangshun.im/cs3216/#/team-dynamics-issues</link>
			<description type="str">Team dynamics has always been a sticky issue to deal with. One of my key goals of joining CS3216 was to learn how to work with talented people from different disciplines. I enjoy working with my Assignment 1 group (Chun Mun, Viet Tien and Soedar) a lot. There's nobody playing the clear role of the leader because we are all leaders in our own areas of expertise. We make important decisions together and leave each other to work on the fine details. Because of our pretty diverse skillsets, when someone faces difficulty in their work, another will be able to step in to help resolve the issue. It is awesome. (:

That said, I have had horrible experiences working in teams before too. In those cases, I usually ended up solo-ing a huge part of the project because the other members were not sure of the requirements, could not deliver the work in time, or were just plain irresponsible.

It was really unfortunate that Uncle Jim's team ended up with only one coder. But I believe that could have been prevented from the start. Being in CS3216, even though it isn't a pure software development class, software development is still the core of a product. How can a software startup survive without a development team?! If I were Uncle Jim (a non-developer), I would have went around trying to form/land myself in a team that consisted of at least 2 coders, as soon as possible, to prevent myself from ending up in such a situation where actions could not live up to the imagination.


### How much control and authority would you have given to this fourth voice in our choice of platform (HTML5/native iOS)? ###

If someone were nice enough to help out in somebody else's group out of goodwill and at the expense of their own free time, I think I would have absolute trust in him/her to make the best decisions for the group. Also, given the circumstances of the team, this fourth voice seems to be the most technologically knowledgeable person around in the team and he would be the most suitable to make the decisions. I'm sure he would make the best decisions for the team (since he is also indirectly involved in the process) and make life easier and better for everybody. The fourth voice is also likely to choose a platform that he is strong in. A developer should be familiar with their tools because it can speed up the development process greatly especially when time is tight.

However, I think it's only right for everyone in the team to be well-informed regarding the matter, hence I would also do my fair share of research and consult the other gurus in class to get their opinions. **Most ideas aren't new.** Almost every 'new' idea is a rehash or combination of existing ideas. Take a look at what and how others are building/have built similar products and learn from their experiences. 


### With the deadline just 2 weeks away, how would you, as project manager, resolved this problem if it were to occur within the team? ###

Honestly, I'm appalled that they actually thought of testing two development tracks in parallel given the amount of manpower and time they had. Are two weeks really sufficient to reach a stage of development that can reveal the critical issues and problems with each platform?

If I were the project manager, I would definitely be cutting features of the product. Doing one thing and doing it really well, beats multiple half-baked features that don't fully work. Also, I would be keeping a lookout for tools and frameworks that the team can exploit to speed up the development process. Rapid server-side solutions such as Parse and Firebase will get the back end up and running in a matter of hours. I also wouldn't bother with styling the application because that takes up a huge load of time, will leave it looking like the default interface. Functionality &gt; Looking pretty when there's no time.


### What are some of the issues that we presented that could have happened to any team? List down 3, and talk about how you would have resolved these issues.

**1. Conflicts**  
This happens in **every** team. It is only *normal* to disagree, it only goes to show that the members are opinionated and are concerned with the project. However, the team should not spend too long arguing it out. Internal voting can be done as soon as possible to arrive at a general consensus so that the team can progress. Also, everyone should try to convince each other and be convinced by the decision made so that there are no hard feelings and the harmony of the group can be preserved.

We are all human. Hence sometimes we let our emotions get the better of us and we vent our frustrations at our team members. As a team, we're all in this together. People bond through shared suffering and this is just another instance of the painful process. Try to tolerate with each other and trash things out as early as possible, before misunderstandings escalate into serious conflicts.

**2. Unrealistic Estimations**  
In the book [Rework](http://37signals.com/rework) by Jason Fried, Founder of 37 Signals, he mentions that most teams have unrealistic project timelines and that most peoples' estimation sucks. We tend to be overly optimistic about our own (and possibly team members') abilities and propose a very ideal timeline for the project. This does not work out most of the time due to the unforeseen circumstances. I would suggest a milestone-based approach where the team tries to attain that milestone together and helping out any member that falls behind. A team is only as fast as their slowest member.

**3. Mismatch of Skillsets**  
Since the team members are set in stone (kinda), the team should change what can be changed: their project focus. If there is only one coder present, then the project should probably be something less technically challenging and have a heavier emphasis on the UI/UX and content.

A very good example of a CS3216 project that isn't super technically challenging to build, but manages to impress people would be [Letters to Amanda](http://www.letterstoamanda.com). They have a clear value proposition and handles it extremely well. 


### Final Words ###

Now I appreciate why we were made to read Rework and Mythical Man-Month back in CS3217. In some cases, good project management skills can be more important than the technical aptitude of the developers.

Will be starting on my final project this weekend. Apprehensive but excited at the possibilities. (:</description>
			<guid type="str">team-dynamics-issues</guid>
			<pubDate type="str">2014-02-28</pubDate>
			<post_number type="int">9</post_number>
		</item>
	</channel>
</rss>
